name: build & deployment on prod env

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build & Run Tests
        run: |
          ./gradlew clean build -x test

      - name: 빌드 결과 저장
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar

  docker-build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test   # ✅ 빌드 & 테스트가 성공해야 실행됨

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t shinjaewoong/homepage:latest .
          docker push shinjaewoong/homepage:latest

  deploy:
    name: Deploy to Ubuntu Server
    runs-on: ubuntu-latest
    needs: docker-build-and-push   # ✅ Docker 빌드 & 푸시 완료 후 실행됨

    steps:
      - name: Deploy to Ubuntu Server via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/deploy
            docker-compose pull
            docker-compose up -d --force-recreate
            sleep 10
            
            if [ "$(docker ps --filter "name=app_blue" -q)" ]; then
              docker stop app_blue && docker rm app_blue
              ACTIVE_COLOR="green"
            elif [ "$(docker ps --filter "name=app_green" -q)" ]; then
              docker stop app_green && docker rm app_green
              ACTIVE_COLOR="blue"
            else
              echo "No active Blue-Green container found. Skipping removal."
              ACTIVE_COLOR="blue"
            fi
